Being a random dump of ideas for now about infrastructure to facilitate assset sharing within SCLOrk performances.

Two components to the system - a C++-based server that communicates to the client via OSC UDP (possibly a C++ implementation of SCLOrkWire).

section:: Server

C++ based server. Keeps a local database using sqlite or other file-based lightweight DB system. One server code base, server design is that there's one "canonical" server and everything else is a mirror. All server-to-server communication happens using libcurl under SSL using self-signed certs and credentials supplied at configuration time. Server mirrors can support tree-like configuration with canonical server at the root. Each client will maintain a local mirror server, so we expect mirrors to scale.

Server needs to be able to operate without connectivity upstream, so able to mint new asset ids and propagate them locally, then when upstream connectivity is re-established being able to propagate those assets automatically up.

subsection:: Asset Pull

If a local mirror gets a request for asset that it doesn't know about, it will pull request to its upstream mirror, which will do the same, all the way up to canonical.

subsection:: Asset Creation

Assets can be created on local mirrors, so there needs to be a way to push assets upstream for sharing. If connection to upstream fails then asset add messages should be queued for sending when connection is re-established. Queue should be able to persist between power cycles/interruptions of the mirror server, so needs to persist to disk.

Assets should be re-sent until confirmation received that the 

section:: Assets

Things that can be shared:

list::
## Code snippets
## Images
## Memes (combination of image asset, comment string, layout/font instructions)
## Sound files
::

Assets are identified by their sha1 hash, that is their unique id. This also serves as a cool way for mirrors to validate that they got the correct data for the asset.

There may also be a salt field that gets added to the hash (added to the file by the server) particularly for code snippets which can be quite short and/or have heavy duplication.

Human-readable name.

Creation date in UTC.

File name extension (filename is the asset id), such as .png or .scd

Author name (or nickname), if available

Optional "session" id - usable for filtering assets via session