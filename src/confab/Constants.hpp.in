#ifndef SRC_CONFAB_CONFAB_VERSION_H_
#define SRC_CONFAB_CONFAB_VERSION_H_

#include "common/Version.hpp"

#include <cstdint>

namespace Confab {

const int kConfabVersionMajor = @CONFAB_VERSION_MAJOR@;
const int kConfabVersionMinor = @CONFAB_VERSION_MINOR@;
const int kConfabVersionPatch = @CONFAB_VERSION_PATCH@;

static const Common::Version confabVersion(kConfabVersionMajor, kConfabVersionMinor, kConfabVersionPatch);

// We assume that memory is allocated in 4K pages, meaning that keeping individual records at sizes smaller than 4K
// uncompressed will help the system manipulate small chunks efficiently. Because we also store a hash of each data
// chunk along with the chunk data itself, and there may be additional overhead in leveldb, flatbuffers, etc, we
// reserve a few bytes within the 4K to make sure we are actually fitting into that 4K limit.
constexpr size_t kPageSize = 4096;
constexpr size_t kDataChunkSize = kPageSize - 32;
constexpr size_t kSingleChunkDataSize = 3 * 1024;
constexpr size_t kMaxAssetSize = 4ull * 1024ull * 1024ull * 1024ull;

}  // namespace Confab

#endif  // SRC_CONFAB_CONFAB_VERSION_H_

